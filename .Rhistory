.libPaths()
file.choose()
library(VariantFiltering)
sessionInfo()
library(GenomicScores)
library(learnr)
a <- 10
a <- 1:10
a
b <- 1:10
b
res <- numeric(length=length(a))
for (i in seq_along(a)) {}
a <- 1:10
b <- 1:10
res <- numeric(length=length(a)) {
res[i] <- a[i] + b[i]
}
for (i in seq_along(a)) {
res[i] <- a[i] + b[i]
}
res
res2 <- a + b
res2
a
b <- 1:5
a + b
library(knitr)
library(SummarizedExperiment)
library(SummarizedExperiment)
library(org.Hs.eg.db)
library(edgeR)
BiocManager::install("edgeR")
library(edgeR)
library(geneplotter)
se2 <- readRDS(file.path("results",
"se2.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
dge2 <- readRDS(file.path("results",
"dge2.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
dge2.filt.noTMM <- readRDS(file.path("results",
"dge2.filt.noTMM.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
dge2.filt <- readRDS(file.path("results",
"dge2.filt.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
se2.filt <- readRDS(file.path("results",
"se2.filt.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
dge2 <- readRDS(file.path("results",
"dge2.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
dge2.filt.noTMM <- readRDS(file.path("results",
"dge2.filt.noTMM.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
dge2.filt <- readRDS(file.path("results",
"dge2.filt.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
se2.filt <- readRDS(file.path("results",
"se2.filt.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
se <- se2
dge <- dge2
dge.filt.noTMM <- dge2.filt.noTMM
dge.filt <- dge2.filt
se.filt <- se2.filt
se <- se2
dge <- dge2
dge.filt.noTMM <- dge2.filt.noTMM
dge.filt <- dge2.filt
se.filt <- se2.filt
mod <- model.matrix(~ FIR + Sex, colData(se.filt))
mod0 <- model.matrix(~ Sex, colData(se.filt))
library(sva)
BiocManager::install("sva")
library(sva)
IQRs <- apply(assays(se.filt)$logCPM, 1, IQR)
IQRs <- apply(assays(se.filt)$logCPM, 1, IQR)
sv <- sva(assays(se.filt)$logCPM[IQRs > quantile(IQRs, prob=0.9), ],
mod=mod, mod0=mod0)
cnames <- c(colnames(mod), paste0("SV", 1:sv$n))
mod <- cbind(mod, sv$sv)
colnames(mod) <- cnames
head(mod, n=3)
modFIRSVs <- mod
saveRDS(modFIRSVs, file=file.path("results", "modFIRSVs.rds"))
cnames <- c(colnames(mod), paste0("SV", 1:sv$n))
mod <- cbind(mod, sv$sv)
colnames(mod) <- cnames
head(mod, n=3)
modFIRSVs <- mod
saveRDS(modFIRSVs, file=file.path("results", "modFIRSVs.rds"))
library(limma)
v <- voomWithQualityWeights(dge.filt.noTMM, modFIRSVs,
normalize="quantile", plot=FALSE,
cex=2, las=1)
v <- voomWithQualityWeights(dge.filt.noTMM, modFIRSVs,
normalize="quantile", plot=FALSE)
fit <- lmFit(v, mod)
fit <- eBayes(fit, robust=TRUE)
BiocManager::install("statmod")
fit <- lmFit(v, mod)
fit <- eBayes(fit, robust=TRUE)
resFDR1 <- decideTests(fit, p.value=0.01)
summary(resFDR1)
resFDR5 <- decideTests(fit, p.value=0.05)
summary(resFDR5)
resFDR10 <- decideTests(fit, p.value=0.1)
summary(resFDR10)
ttFIR <- topTable(fit, coef="FIRyes", n=Inf)
dim(ttFIR)
par(mfrow=c(1, 2), mar=c(4, 5, 2, 2))
hist(ttFIR$P.Value, xlab="Raw p-value FIR effect",
main="", las=1, cex.lab=1.5, cex.axis=1.2, col="gray")
qqt(fit$t[, "FIRyes"], df=fit$df.total, main="", pch=".",
cex=4, xlim=range(fit$t[, "FIRyes"]), cex.lab=1.5,
cex.axis=1.2, las=1, panel.first=grid())
abline(0, 1, lwd=2, col="gray")
library(plotrix)
library(knitr)
library(SummarizedExperiment)
library(org.Hs.eg.db)
library(edgeR)
library(geneplotter)
opts_chunk$set(cache=TRUE,
cache.path="cache/DE",
cache.extra=R.version.string,
autodep=TRUE,
fig.align="center",
comment="")
se2 <- readRDS(file.path("results",
"se2.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
dge2 <- readRDS(file.path("results",
"dge2.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
dge2.filt.noTMM <- readRDS(file.path("results",
"dge2.filt.noTMM.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
dge2.filt <- readRDS(file.path("results",
"dge2.filt.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
se2.filt <- readRDS(file.path("results",
"se2.filt.countsSOintstrictPEstrNoFrgSM2NoSANoDupPassQC.STAR.GENCODEv24.hg38.pd.byInd.rds"))
se <- se2
dge <- dge2
dge.filt.noTMM <- dge2.filt.noTMM
dge.filt <- dge2.filt
se.filt <- se2.filt
mod <- model.matrix(~ CHO + Sex, colData(se.filt))
mod0 <- model.matrix(~ Sex, colData(se.filt))
library(sva)
IQRs <- apply(assays(se.filt)$logCPM, 1, IQR)
sv <- sva(assays(se.filt)$logCPM[IQRs > quantile(IQRs, prob=0.9), ],
mod=mod, mod0=mod0)
cnames <- c(colnames(mod), paste0("SV", 1:sv$n))
mod <- cbind(mod, sv$sv)
colnames(mod) <- cnames
head(mod, n=3)
modCHOSVs <- mod
saveRDS(modCHOSVs, file=file.path("results", "modCHOSVs.rds"))
library(limma)
v <- voomWithQualityWeights(dge.filt.noTMM, modCHOSVs,
normalize="quantile", plot=FALSE,
cex=2, las=1)
library(plotrix)
par(mfrow=c(1, 2), mar=c(4, 5, 2, 2))
FDRcutoff <- 0.05
fcCutoff <- 1.5
maskDE <- ttFIR$adj.P.Val < FDRcutoff & abs(ttFIR$logFC) > log2(fcCutoff)
DEgenes <- rownames(ttFIR)[maskDE]
nTopDEgenes <- min(10, length(DEgenes))
plot(ttFIR$logFC, -log10(ttFIR$P.Value), pch=".", cex=4, col=grey(0.75),
main="", xlab=expression(paste(log[2], " Fold Change")), las=1, xlim=c(-1.2, 2),
ylab=expression(paste(-log[10], " Raw P-value")), cex.lab=1.5, cex.axis=1.3)
abline(v=c(-log2(1.5), log2(1.5)), col=grey(0.5), lwd=1, lty=2)
abline(h=-log10(max(ttFIR$P.Value[ttFIR$adj.P.Val <= FDRcutoff])),
col=grey(0.5), lwd=1, lty=2)
text(-log2(1.5), 0, "> 50%\nfold change", cex=0.7, pos=2)
text(log2(1.5), 0, "> 50%\nfold change", cex=0.7, pos=4)
points(ttFIR$logFC[match(DEgenes, rownames(ttFIR))],
-log10(ttFIR$P.Value[match(DEgenes, rownames(ttFIR))]), pch=".", cex=4, col="red")
text(max(ttFIR$logFC)*0.90, -log10(max(ttFIR$P.Value[ttFIR$adj.P.Val <= FDRcutoff])),
sprintf("%d%% FDR", 100*FDRcutoff), pos=1)
topDEgenesIdxByUpFC <- intersect(order(ttFIR$logFC, decreasing=TRUE), which(ttFIR$logFC > 0))
topDEgenesIdxByUpFC <- topDEgenesIdxByUpFC[rownames(ttFIR)[topDEgenesIdxByUpFC] %in% DEgenes]
topDEgenesIdxByDwFC <- intersect(order(ttFIR$logFC, decreasing=FALSE), which(ttFIR$logFC < 0))
topDEgenesIdxByDwFC <- topDEgenesIdxByDwFC[rownames(ttFIR)[topDEgenesIdxByDwFC] %in% DEgenes]
topDEgenesIdxByFC <- c(topDEgenesIdxByUpFC[1:nTopDEgenes], topDEgenesIdxByDwFC[1:nTopDEgenes])
topDEgenesIdxByFC <- topDEgenesIdxByFC[!is.na(topDEgenesIdxByFC)]
topDEgenesIdxByP <- order(ttFIR$adj.P.Val, decreasing=FALSE)
topDEgenesIdxByP <- topDEgenesIdxByP[rownames(ttFIR)[topDEgenesIdxByP] %in% DEgenes]
topDEgenesIdxByP <- setdiff(topDEgenesIdxByP, topDEgenesIdxByFC)
topDEgenesIdxByP <- topDEgenesIdxByP[1:min(length(topDEgenesIdxByP), nTopDEgenes)]
topDEgenesIdx <- c(topDEgenesIdxByFC, topDEgenesIdxByP)
## intelligent point label placement with the package plotrix
pos <- thigmophobe(ttFIR$logFC[topDEgenesIdx], -log10(ttFIR$P.Value[topDEgenesIdx]))
names(pos) <- sprintf("%s", ttFIR$Symbol[topDEgenesIdx])
## pos["GGH"] <- 4 ; pos["HAGH"] <- 4 ; pos["RBM38"] <- 2 ; pos["CDK1"] <- 1
## pos["LOC100008587"] <- 2 ; pos["SRGN"] <- 4 ; pos["MS4A3"] <- 1
text(ttFIR$logFC[topDEgenesIdx], -log10(ttFIR$P.Value[topDEgenesIdx]),
labels=sprintf("%s", ttFIR$Symbol[topDEgenesIdx]), cex=0.7, pos=pos)
plot(ttFIR$AveExpr, ttFIR$logFC, pch=".", cex=3, col=grey(0.75),
main="", xlab=expression(paste(log[2], " CPM Average Expression")),, axes=FALSE,
ylab=expression(paste(log[2], " Fold Change")), las=1, cex.lab=1.5, cex.axis=1.3)
axis(1, at=seq(1, 17, by=2), labels=TRUE, cex.axis=1.3)
axis(2, at=seq(-1.5, 1.5, by=0.5), labels=TRUE, cex.axis=1.3, las=1)
abline(h=0, col=grey(0.5), lwd=1, lty=1)
abline(h=c(-log2(1.5), log2(1.5)), col=grey(0.5), lwd=1, lty=2)
text(max(ttFIR$AveExpr)-0.7, -log2(1.5), "> 50%\nfold change", cex=0.7, pos=1)
text(max(ttFIR$AveExpr)-0.7, log2(1.5), "> 50%\nfold change", cex=0.7, pos=3)
points(ttFIR$AveExpr, ttFIR$logFC, pch=".", cex=3, col=gray(0.75))
points(ttFIR$AveExpr[match(DEgenes, rownames(ttFIR))],
ttFIR$logFC[match(DEgenes, rownames(ttFIR))],
pch=".", cex=4, col="red")
topDEgenesIdxByUpFC <- intersect(order(ttFIR$logFC, decreasing=TRUE), which(ttFIR$logFC > 0))
topDEgenesIdxByUpFC <- topDEgenesIdxByUpFC[!is.na(match(rownames(ttFIR)[topDEgenesIdxByUpFC], DEgenes))]
topDEgenesIdxByDwFC <- intersect(order(ttFIR$logFC, decreasing=FALSE), which(ttFIR$logFC < 0))
topDEgenesIdxByDwFC <- topDEgenesIdxByDwFC[!is.na(match(rownames(ttFIR)[topDEgenesIdxByDwFC], DEgenes))]
topDEgenesIdxByFC <- c(topDEgenesIdxByUpFC[1:nTopDEgenes], topDEgenesIdxByDwFC[1:nTopDEgenes])
topDEgenesIdxByFC <- topDEgenesIdxByFC[!is.na(topDEgenesIdxByFC)]
topDEgenesIdxByP <- order(ttFIR$adj.P.Val, decreasing=FALSE)
topDEgenesIdxByP <- topDEgenesIdxByP[!is.na(match(rownames(ttFIR)[topDEgenesIdxByP], DEgenes))]
topDEgenesIdxByP <- setdiff(topDEgenesIdxByP, topDEgenesIdxByFC)
topDEgenesIdxByP <- topDEgenesIdxByP[1:min(length(topDEgenesIdxByP), nTopDEgenes)]
topDEgenesIdx <- c(topDEgenesIdxByFC, topDEgenesIdxByP)
## intelligent point label placement with the package plotrix
pos <- thigmophobe(ttFIR$AveExpr[topDEgenesIdx], ttFIR$logFC[topDEgenesIdx])
names(pos) <- sprintf("%s", ttFIR$Symbol[topDEgenesIdx])
## pos["LOC100008587"] <- 1 ; pos["SEC14L3"] <- 1 ; pos["RBM38"] <- 3
## pos["HAGH"] <- 3 ; pos["TMOD1"] <- 1
text(ttFIR$AveExpr[topDEgenesIdx], ttFIR$logFC[topDEgenesIdx],
labels=sprintf("%s", ttFIR$Symbol[topDEgenesIdx]), cex=0.7, pos=pos)
par(mfrow=c(1,1))
plot(ttFIR$logFC, -log10(ttFIR$P.Value), pch=".", cex=4, col=grey(0.75),
main="", xlab=expression(paste(log[2], " Fold Change")), las=1, xlim=c(-1.2, 2),
ylab=expression(paste(-log[10], " Raw P-value")), cex.lab=1.5, cex.axis=1.3)
par(mfrow=c(1, 2), mar=c(4, 5, 2, 2))
FDRcutoff <- 0.05
fcCutoff <- 1.5
maskDE <- ttFIR$adj.P.Val < FDRcutoff & abs(ttFIR$logFC) > log2(fcCutoff)
DEgenes <- rownames(ttFIR)[maskDE]
nTopDEgenes <- min(10, length(DEgenes))
plot(ttFIR$logFC, -log10(ttFIR$P.Value), pch=".", cex=4, col=grey(0.75),
main="", xlab=expression(paste(log[2], " Fold Change")), las=1, xlim=c(-1.2, 2),
ylab=expression(paste(-log[10], " Raw P-value")), cex.lab=1.5, cex.axis=1.3)
abline(v=c(-log2(1.5), log2(1.5)), col=grey(0.5), lwd=1, lty=2)
abline(h=-log10(max(ttFIR$P.Value[ttFIR$adj.P.Val <= FDRcutoff])),
col=grey(0.5), lwd=1, lty=2)
text(-log2(1.5), 0, "> 50%\nfold change", cex=0.7, pos=2)
text(log2(1.5), 0, "> 50%\nfold change", cex=0.7, pos=4)
points(ttFIR$logFC[match(DEgenes, rownames(ttFIR))],
-log10(ttFIR$P.Value[match(DEgenes, rownames(ttFIR))]), pch=".", cex=4, col="red")
text(max(ttFIR$logFC)*0.90, -log10(max(ttFIR$P.Value[ttFIR$adj.P.Val <= FDRcutoff])),
sprintf("%d%% FDR", 100*FDRcutoff), pos=1)
topDEgenesIdxByUpFC <- intersect(order(ttFIR$logFC, decreasing=TRUE), which(ttFIR$logFC > 0))
topDEgenesIdxByUpFC <- topDEgenesIdxByUpFC[rownames(ttFIR)[topDEgenesIdxByUpFC] %in% DEgenes]
topDEgenesIdxByDwFC <- intersect(order(ttFIR$logFC, decreasing=FALSE), which(ttFIR$logFC < 0))
topDEgenesIdxByDwFC <- topDEgenesIdxByDwFC[rownames(ttFIR)[topDEgenesIdxByDwFC] %in% DEgenes]
topDEgenesIdxByFC <- c(topDEgenesIdxByUpFC[1:nTopDEgenes], topDEgenesIdxByDwFC[1:nTopDEgenes])
topDEgenesIdxByFC <- topDEgenesIdxByFC[!is.na(topDEgenesIdxByFC)]
topDEgenesIdxByP <- order(ttFIR$adj.P.Val, decreasing=FALSE)
topDEgenesIdxByP <- topDEgenesIdxByP[rownames(ttFIR)[topDEgenesIdxByP] %in% DEgenes]
topDEgenesIdxByP <- setdiff(topDEgenesIdxByP, topDEgenesIdxByFC)
topDEgenesIdxByP <- topDEgenesIdxByP[1:min(length(topDEgenesIdxByP), nTopDEgenes)]
topDEgenesIdx <- c(topDEgenesIdxByFC, topDEgenesIdxByP)
## intelligent point label placement with the package plotrix
pos <- thigmophobe(ttFIR$logFC[topDEgenesIdx], -log10(ttFIR$P.Value[topDEgenesIdx]))
names(pos) <- sprintf("%s", ttFIR$Symbol[topDEgenesIdx])
## pos["GGH"] <- 4 ; pos["HAGH"] <- 4 ; pos["RBM38"] <- 2 ; pos["CDK1"] <- 1
## pos["LOC100008587"] <- 2 ; pos["SRGN"] <- 4 ; pos["MS4A3"] <- 1
text(ttFIR$logFC[topDEgenesIdx], -log10(ttFIR$P.Value[topDEgenesIdx]),
labels=sprintf("%s", ttFIR$Symbol[topDEgenesIdx]), cex=0.7, pos=pos)
plot(ttFIR$AveExpr, ttFIR$logFC, pch=".", cex=3, col=grey(0.75),
main="", xlab=expression(paste(log[2], " CPM Average Expression")),, axes=FALSE,
ylab=expression(paste(log[2], " Fold Change")), las=1, cex.lab=1.5, cex.axis=1.3)
axis(1, at=seq(1, 17, by=2), labels=TRUE, cex.axis=1.3)
axis(2, at=seq(-1.5, 1.5, by=0.5), labels=TRUE, cex.axis=1.3, las=1)
abline(h=0, col=grey(0.5), lwd=1, lty=1)
abline(h=c(-log2(1.5), log2(1.5)), col=grey(0.5), lwd=1, lty=2)
text(max(ttFIR$AveExpr)-0.7, -log2(1.5), "> 50%\nfold change", cex=0.7, pos=1)
text(max(ttFIR$AveExpr)-0.7, log2(1.5), "> 50%\nfold change", cex=0.7, pos=3)
points(ttFIR$AveExpr, ttFIR$logFC, pch=".", cex=3, col=gray(0.75))
points(ttFIR$AveExpr[match(DEgenes, rownames(ttFIR))],
ttFIR$logFC[match(DEgenes, rownames(ttFIR))],
pch=".", cex=4, col="red")
topDEgenesIdxByUpFC <- intersect(order(ttFIR$logFC, decreasing=TRUE), which(ttFIR$logFC > 0))
topDEgenesIdxByUpFC <- topDEgenesIdxByUpFC[!is.na(match(rownames(ttFIR)[topDEgenesIdxByUpFC], DEgenes))]
topDEgenesIdxByDwFC <- intersect(order(ttFIR$logFC, decreasing=FALSE), which(ttFIR$logFC < 0))
topDEgenesIdxByDwFC <- topDEgenesIdxByDwFC[!is.na(match(rownames(ttFIR)[topDEgenesIdxByDwFC], DEgenes))]
topDEgenesIdxByFC <- c(topDEgenesIdxByUpFC[1:nTopDEgenes], topDEgenesIdxByDwFC[1:nTopDEgenes])
topDEgenesIdxByFC <- topDEgenesIdxByFC[!is.na(topDEgenesIdxByFC)]
topDEgenesIdxByP <- order(ttFIR$adj.P.Val, decreasing=FALSE)
topDEgenesIdxByP <- topDEgenesIdxByP[!is.na(match(rownames(ttFIR)[topDEgenesIdxByP], DEgenes))]
topDEgenesIdxByP <- setdiff(topDEgenesIdxByP, topDEgenesIdxByFC)
topDEgenesIdxByP <- topDEgenesIdxByP[1:min(length(topDEgenesIdxByP), nTopDEgenes)]
topDEgenesIdx <- c(topDEgenesIdxByFC, topDEgenesIdxByP)
## intelligent point label placement with the package plotrix
pos <- thigmophobe(ttFIR$AveExpr[topDEgenesIdx], ttFIR$logFC[topDEgenesIdx])
names(pos) <- sprintf("%s", ttFIR$Symbol[topDEgenesIdx])
## pos["LOC100008587"] <- 1 ; pos["SEC14L3"] <- 1 ; pos["RBM38"] <- 3
## pos["HAGH"] <- 3 ; pos["TMOD1"] <- 1
text(ttFIR$AveExpr[topDEgenesIdx], ttFIR$logFC[topDEgenesIdx],
labels=sprintf("%s", ttFIR$Symbol[topDEgenesIdx]), cex=0.7, pos=pos)
BiocManager::version()
q(save="no")
getwd()
q()
1+1
log(10)
## read COVID19 data
dat <- read.csv("cataluna_setmanal.csv", sep=";", stringsAsFactors=TRUE)
setwd("~/Documents/docencia/fbc/practical9")
## read COVID19 data
dat <- read.csv("cataluna_setmanal.csv", sep=";", stringsAsFactors=TRUE)
getwd()
## read COVID19 data
dat <- read.csv("catalunya_setmanal.csv", sep=";", stringsAsFactors=TRUE)
head(dat)
dini <- as.Date(dat$DATA_INI)
dfi <- as.Date(dat$DATA_FI)
class(dini)
class(dfi)
head(dini)
rm(dini)
rm(dfi)
startdate <- as.Date(dat$DATA_INI)
enddate <- as.Date(dat$DATA_FI)
head(startdate)
class(startdate)
head(enddate)
class(enddate)
head(enddate - startdate)
summary(enddate - startdate)
table(enddate - startdate)
head(enddate - startdate + 1)
head(months.Date(startdate))
month <- months.Date(startdate)
class(month)
head(month)
table(month)
monthf <- factor(month)
head(monthf)
levels(monthf)
nlevels(monthf)
table(monthf)
table(month)
head(months.Date(startdate, abbreviate=TRUE))
month <- months.Date(startdate, abbreviate=TRUE)
head(month)
monthf <- factor(month)
head(monthf)
levels(monthf)
nlevels(monthf)
MONTHS
help("months")
head(months(startdate))
head(months(startdate, abbreviate=TRUE))
mf <- factor(m, levels=c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
rm(month)
m <- months(startdate, abbreviate=TRUE)
mf <- factor(m, levels=c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
mf
head(mf)
levels(mf)
nlevels(mf)
table(mf)
help("table")
## read COVID19 data
dat <- read.csv("catalunya_setmanal.csv", sep=";", stringsAsFactors=TRUE)
m <- months(startdate, abbreviate=TRUE)
mf <- factor(m, levels=c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
table(mf)
mf <- droplevels(mf)
levels(mf)
table(mf)
head(dat)
table(dat$R0_CONFIRMAT_M ~ mf)
## read COVID19 data
dat <- read.csv("catalunya_setmanal.csv", sep=";", stringsAsFactors=TRUE)
datg <- dat[dat$RESIDENCIA == "No", ]
m <- months(datg$DATA_INI, abbreviate=TRUE)
startingdate <- as.Date(datg$DATA_INI)
m <- months(startingdate, abbreviate=TRUE)
mf <- factor(m, levels=c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
head(datG)
head(datg)
plot(datg$R0_CONFIRMAT_M ~ mf)
mf <- droplevels(mf)
plot(datg$R0_CONFIRMAT_M ~ mf)
plot(datg$IEPG_CONFIRMAT ~ mf)
plot(datg$IA14 ~ mf)
plot(datg$IEPG_CONFIRMAT ~ mf)
plot(datg$IA14 ~ mf)
plot(datg$IEPG_CONFIRMAT ~ mf)
help(plot)
help(plot)
plot(datg$R0_CONFIRMAT_M ~ mf, xlab="Month", ylab="R0")
plot(datg$IEPG_CONFIRMAT ~ mf, xlab="Month", ylab="Risk of outbreak")
datg$IEPG_CONFIRMAT[mf == "Feb"]
datg$IEPG_CONFIRMAT[mf == "Nov"]
plot(datg$R0_CONFIRMAT_M ~ mf, xlab="Month", ylab="R0")
datg$R0_CONFIRMAT_M[mf == "Feb"]
help(lapply)
## group risk of outbreak by month using a list
iepgbymonth <- split(datg$IEPG_CONFIRMAT, mf)
head(iepgbymonth)
head(iepgbymonth, n=3)
class(iepgbymonth)
length(iepgbymonth)
names(iepgbymonth)
mean(iepgbymonth$Apr)
mean(iepgbymonth$Mar)
mean(iepgbymonth$Mar, na.rm=TRUE)
hist(iepgbymonth$Apr)
hist(iepgbymonth$Oct)
hist(iepgbymonth$Jun)
hist(iepgbymonth$Apr)
## plot distributions of risk of outbreak for April and June
par(mfrow=c(1, 2))
hist(iepgbymonth$Apr, xlab="Risk of outbreak", main="April")
hist(iepgbymonth$Jun, xlab="Risk of outbreak", main="June")
hist(iepgbymonth$Apr, xlab="Risk of outbreak", main="April", xlim=c(10, 150))
hist(iepgbymonth$Jun, xlab="Risk of outbreak", main="June", xlim=c(10, 150))
hist(iepgbymonth$Mar, xlab="Risk of outbreak", main="June", xlim=c(10, 150))
## plot distributions of risk of outbreak for April and June
par(mfrow=c(1, 2))
hist(iepgbymonth$Apr, xlab="Risk of outbreak", main="April")#, xlim=c(10, 150))
hist(iepgbymonth$Mar, xlab="Risk of outbreak", main="June")#, xlim=c(10, 150))
mean(iepgbymonth$Jun)
## plot distributions of risk of outbreak for April and June
par(mfrow=c(1, 2))
hist(iepgbymonth$Apr, xlab="Risk of outbreak", main="April")
hist(iepgbymonth$Jun, xlab="Risk of outbreak", main="June")
lapply(iepgbymonth, mean)
sapply(iepgbymonth, mean)
sapply(iepgbymonth, mean, na.rm=TRUE)
head(datg)
plot(datg$PERC_PCR_TAR_POSITIVES ~ mf)
par(mfrow=c(1,1))
plot(datg$PERC_PCR_TAR_POSITIVES ~ mf)
plot(datg$EXITUS ~ mf)
plot(datg$PERC_PCR_TAR_POSITIVES ~ mf)
plot(datg$EXITUS ~ mf)
## plot exitus by month
plot(datg$EXITUS ~ mf)
## calculate mean of exitus per month
exituspermonth <- split(datg$EXITUS, mf)
meanexituspermonth <- sapply(exituspermonth, mean, na.rm=TRUE)
meanexituspermonth
points(1:nlevels(mf), meanexituspermonth)
help("points")
points(1:nlevels(mf), meanexituspermonth, pch=18)
## plot exitus by month
plot(datg$EXITUS ~ mf)
points(1:nlevels(mf), meanexituspermonth, pch=18)
